public class example6_NoteService {
	
	    public static example6_Node createTail(int num) {
	    	example6_Node head = null;
	        for (int i = num; i >= 0; i--) {
	            head = new example6_Node(i, head);
	        }
	        return head;
	    }

	    public static example6_Node createHead(int num) {
	    	example6_Node node = new example6_Node(0, null);
	    	example6_Node head = node;
	        for (int i = 0; i < num - 1; i++) {
	            node.setNext(new example6_Node(i + 1, null));
	            node = node.getNext();
	        }
	        return head;
	    }

	    public static String toString(example6_Node head) {
	        String string = "";
	        while (head != null) {
	            string +=  head.getValue()+ " ";
	            head = head.getNext();
	        }
	        return string;
	    }

	    public static example6_Node addFirst(example6_Node head) {
	        return new example6_Node(head.getValue() - 1, head);
	    }

	    public static void addLast(example6_Node node) {
	        while (node.getNext() != null) {
	            node = node.getNext();
	        }
	        node.setNext(new example6_Node(node.getValue() + 1, null));
	    }

	    public static example6_Node insert(int index, example6_Node node, example6_Node head) {
	        int indexMethod = 0;
	        example6_Node buffer = head;
	        example6_Node headReturn = head;
	        while (true) {
	            if (index == indexMethod && indexMethod != 0) {
	                node.setNext(head);
	                buffer.setNext(node);
	            } else if (index == indexMethod && indexMethod == 0) {
	                node.setNext(head);
	                return node;
	            }
	            indexMethod++;
	            buffer = head;
	            if (head.getNext() == null) {
	                break;
	            }
	            head = head.getNext();
	        }
	        return headReturn;
	    }

	    public static example6_Node removeFirst(example6_Node node) {
	        return node.getNext();
	    }

	    public static void removeLast(example6_Node node) {
	        while (node.getNext() != null) {
	            node = node.getNext();
	            if (node.getNext().getNext() == null) {
	                node.setNext(null);
	            }
	        }
	    }

	    public static example6_Node remove(int index, Node node) {
	        int indexMethod = 0;
	        example6_Node returnNode = node;
	        example6_Node buffer = node;
	        while (true) {
	            if (index == indexMethod && indexMethod != 0) {
	                buffer.setNext(node.getNext());
	            } else if (index == indexMethod && indexMethod == 0) {
	                return node.getNext();
	            }
	            indexMethod++;
	            buffer = node;
	            if (node.getNext() == null) {
	                break;
	            }
	            node = node.getNext();
	        }
	        return returnNode;
	    }

	    public static example6_Node createHeadRec(int num) {
	        if (num == 0) {
	            return null;
	        }
	        return new example6_Node(num - 1, createHeadRec(num - 1));
	    }

	    public static example6_Node createTailRec(int num, example6_Node node) {
	    	example6_Node node1 = new example6_Node(num - 1, node);
	        if (num == 0) {
	            return node;
	        }
	        return createTailRec(num - 1, node1);
	    }

	    public static String toStringRec(Node head) {
	        if (head.getNext() == null) {
	            return "";
	        }
	        return head.getValue() + " " + toStringRec(head.getNext());
	    }
	}
